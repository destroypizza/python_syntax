# *** Коллекции ***

# Кортежи (tuple)

# упорядоченная, неизменяемая (иммутабельная) коллекция

# нельзя добавлять, заменять и удалять элементы

# создание пустого кортежа
# пустой кортеж не имеет смысла
tuple_1 = ()
tuple_1 = tuple()

# print(tuple_1)

# создание предварительно заполненного кортежа
tuple_1 = (10, 20, 30, 0, 5 ,3)
tuple_2 = (1, 500, 43.456, "python", [1,2,3], (10,20,30))
tuple_3 = tuple([10,20,30,40])
tuple_4 = tuple("hello, tuple!")

# чтение значений
val_1 = tuple_4[::2]

# срез кортежа 
slice_1 = tuple_4[2:5]
slice_1 = tuple_4[2::2]
slice_1 = tuple_4[::-1]

# print(tuple_4)
# print(slice_1)

# методы кортежа
tuple_5 = (1, 2, 1, 1, 2, 3)

res = tuple_5.count(1)

# print(res)

# list_0 = [1, 2, 1, 1, 2, 3]

# cnt = list_0.count(2)

# print(cnt)

res = tuple_5.index(2, 1, 4)

# print(res)


# Словарь (dict, dictionary)

# не упорядоченная изменяемая (мутабельная) коллекция

# элемент словаря - пара "ключ-значение"

# создание пустого словаря
dict_1 = {}
dict_1 = dict()

# print(dict_1)

# создание предварительно заполненного словаря
dict_1 = {5:1000, 0:3.14, 'A' : 20, "abc": "python", "ключ" : "значение", "кортеж" : (1,2,3)}
dict_2 = dict([(10,20), ('k','v'), (2, dict_1)])
dict_3 = dict(a=100, b=200)


# print(dict_3)

# чтение значения пар
val_2 = dict_1["кортеж"]
val_2 = dict_1[0]

# замена значения пар
dict_1["A"] = 777

# добавление пары
dict_1['B'] = 1000

# удаление пары
del dict_1["кортеж"]

# методы

# print(dict_1)

res = list(dict_1.items())
# print(res)

# print(tuple(dict_1.values()))

# print(tuple(dict_1.keys()))




# самостоятельно проработать множество (set)    
set_1 = {1, 2, 3, 4, 5, 5, 7, 6, 6}

# print(set_1)

# Проверим, сработает ли у нас, если мы вызовем множество с пустым значением
set_2 = {}

# print(set_2)

# И так, мы видим, что мы можем вызывать множество с пустыми значениями.
# Однако, чтобы определить, действительно ли он выдает себя как за множество, мы используем объект "type" чтобы определить его тип
# print(type(set_2))

# С помощью type мы поняли, что данная переменная с пустым значением относится к типу "dict" (словарь)
# Для того, чтобы упростить и вывести наконец данную переменную в тип "множество" мы пользуемся "set" (множество)
# и выглядит как-то так.
set_3 = set()
# print(type(set_3))
# И так, мы теперь видим, что в терминале он показывает, что переменная относится к типу "массивы" (set)

# Кроме "set" есть еще его альтер сущность в виде "frozenset"
# По имени можно определить, что его нельзя менять
# "frozenset" - неизменяемый тип данных
# для примера сперва посмотрим с типа set
set_1 = {1,2,3,4}
set_1.add(5)

# Также если нужно добавить несколько значений, то используем ".update()"
set_1.update(['asd', 56, 777])
print(set_1)
# Здесь мы видим, что значение спокойно можно добавить, то есть внедрить с помощью .add()

# Но что будет если мы такое же сделаем и с "frozenset"
# frozenset_1 = {1, 2, 3, 4}
# frozenset_1.add(5)
# print(frozenset_1)
set_4 =
